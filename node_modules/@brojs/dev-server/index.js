import express from "express";
import webpack from "webpack";
import cookieParser from "cookie-parser";
import session from "express-session";
import webpackDevMiddleware from "webpack-dev-middleware";
import webpackHotMiddleware from "webpack-hot-middleware";
import { applyHbs } from "@brojs/templates";
import { getProjectConfig, getModuleApi } from "@brojs/utils";
import { getModuleData } from "@brojs/utils";
import webpackConfig from "@brojs/webpack-config";
import openBrowser from "react-dev-utils/openBrowser.js";
import { env } from 'node:process'

import getConfig from "./utils/get-config-template.js";
import getmoduleMiddleware from "./middleware/get-module.js";


// TODO: websocket
// import { setIo, getIo } from './io';

const runServer = async ({ port, withOpenBrowser }) => {
  const pkg = await getModuleData();
  if (!env.ENTRY || env.ENTRY === 'undefined') {
    env.ENTRY = pkg.entryPoint;
  }
  const webpConfig = await webpackConfig();

  webpConfig.mode = "development";

  const app = express();

  const compiler = webpack(webpConfig);

  const {
    apiPath = "stubs/api",
    config: projectConfig,
    navigations,
    apps,
    features,
  } = (await getProjectConfig()).default;

  applyHbs(app);
  //   const server = setIo(app);
  app.use(express.json({ limit: "50mb" }));
  app.use(express.urlencoded({ limit: "50mb", extended: true }));
  app.use(
    session({
      secret: "LONG_RANDOM_STRING_HERE",
      resave: true,
      saveUninitialized: false,
    })
  );
  app.use(cookieParser());

  const appPath = `/${pkg.cleanName}`;

  // hot reload -->
  app.use(
    webpackDevMiddleware(compiler, {
      publicPath: webpConfig.output.publicPath,
    })
  );

  app.use(webpackHotMiddleware(compiler));
  // <-- hot reload

  app.get("/", (req, res) => res.redirect(appPath));

  getModuleApi(app, apiPath);

  const envConfig = await getConfig({
    config: projectConfig || {},
    navigations: navigations || {},
    apps: apps || {},
    features: features || {},
  });
  app.use(appPath, function (request, response) {
    response.render("dev.hbs", envConfig);
  });

  app.use(
    envConfig.baseUrl,
    express.Router().get(/\/([.-\w]+)\/([.-\w\d]+)\/(.*)/, getmoduleMiddleware)
  );

  app.listen(port, () => {
    const openUrl = `http://localhost:${port}${appPath}`;
    console.log("ðŸ› ", "Open:", openUrl);

    if (withOpenBrowser) {
      openBrowser(openUrl);
    }
  });
};

// module.exports = runServer;

export default runServer;

// module.exports.getIo = getIo;

// import path from "node:path";
// import { locatePathSync as locatePath } from "locate-path";

import { createRequire } from 'node:module';
import { sync as glob } from 'glob'

// create custome require function
const require = createRequire(import.meta.url);

export const invalidateApi = (location) => {
    glob(`${location}/**/*`, { absolute: true })
        .filter((module) => {
            try {
                return require.resolve(module)
            } catch (e) {
                return false
            }
        })
        .forEach((module) => {
            const resolvedModule = require.resolve(module)
            if (require.cache[resolvedModule]) {
                delete require.cache[resolvedModule]
            }
        })
}

let a = 1;
export const safeConnectApi = (app, location) => {
  invalidateApi(location)
  // const apiRouterPath = locatePath([
  //   path.resolve(location),
  //   path.resolve(`${location}/index.js`),
  //   path.resolve(`${location}/index.mjs`),
  // ]);

  // if (apiRouterPath) {
  //   app.use(`/api`, async (...args) => {
  //     const apiRouter = await import(`file:\\\\${apiRouterPath}?q=${a++}`);
  //     console.log(111, `file:\\\\${apiRouterPath}?q=${a++}`);
  //     apiRouter.default.apply(app, args);
  //   });
  // }

  app.use("/api", async (...args) => {
    // const apiRouter = await import(location);
    // apiRouter.default.apply(app, args);
    require(location).apply(app, args)
  });
};

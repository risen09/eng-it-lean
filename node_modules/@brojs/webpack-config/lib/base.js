import path from "path";
import { CleanWebpackPlugin } from "clean-webpack-plugin";
import webpackCopy from "copy-webpack-plugin";
import { CustomizeRule, mergeWithRules } from "webpack-merge";
import { getProjectConfig } from "@brojs/utils";

const getBaseConfig = async () => {
  const {
    default: { webpackConfig = {} },
  } = await getProjectConfig();
  const outputDirectory = "dist";
  const cwd = process.cwd();

  return mergeWithRules({
    module: {
      rules: {
        test: CustomizeRule.Match,
        use: {
          loader: CustomizeRule.Match,
          options: CustomizeRule.Replace,
        },
      },
    },
  })(
    {
      output: {
        filename: "[name].js?[hash]",
        path: path.resolve(cwd, outputDirectory),
        libraryTarget: "umd",
        globalObject: `(typeof self !== 'undefined' ? self : this)`,
      },
      plugins: [
        new CleanWebpackPlugin(),
        new webpackCopy({
          patterns: [
            {
              from: "./remote-assets/",
              to: "remote-assets",
              noErrorOnMissing: true,
            },
            {
              from: process.env.LOCALES,
              to: "locales",
              noErrorOnMissing: true,
            },
          ],
        }),
      ],
      resolve: {
        modules: [cwd, "node_modules"],
        extensions: [".webpack.js", ".web.js", ".ts", ".tsx", ".js", ".css"],
      },

      module: {
        rules: [
          {
            test: /\.(jsx?|tsx?)$/,
            exclude: /node_modules/,
            use: {
              loader: "babel-loader",
              options: {
                presets: [
                  "@babel/preset-env",
                  "@babel/preset-react",
                  "@babel/preset-typescript",
                ],
              },
            },
          },
          {
            test: /\.(jpe?g|gif|png|woff|woff2|svg|ttf|eot|wav|mp3|webp|ico)$/,
            type: "asset",
          },
          {
            test: /\.css$/i,
            use: [
              {
                loader: "style-loader",
              },
              {
                loader: "css-loader",
              },
            ],
          },
        ],
      },
    },
    webpackConfig
  );
};

export default getBaseConfig;
